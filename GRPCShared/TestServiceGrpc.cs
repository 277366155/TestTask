// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TestService.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace Test.Services {
  public static partial class TestSrv
  {
    static readonly string __ServiceName = "TestServices.TestSrv";

    static readonly Marshaller<global::Test.Services.GetPersonRequest> __Marshaller_GetPersonRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Test.Services.GetPersonRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Test.Services.PersonListResponse> __Marshaller_PersonListResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Test.Services.PersonListResponse.Parser.ParseFrom);

    static readonly Method<global::Test.Services.GetPersonRequest, global::Test.Services.PersonListResponse> __Method_GetPersonList = new Method<global::Test.Services.GetPersonRequest, global::Test.Services.PersonListResponse>(
        MethodType.Unary,
        __ServiceName,
        "GetPersonList",
        __Marshaller_GetPersonRequest,
        __Marshaller_PersonListResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Test.Services.TestServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of TestSrv</summary>
    public abstract partial class TestSrvBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Test.Services.PersonListResponse> GetPersonList(global::Test.Services.GetPersonRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for TestSrv</summary>
    public partial class TestSrvClient : ClientBase<TestSrvClient>
    {
      /// <summary>Creates a new client for TestSrv</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public TestSrvClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for TestSrv that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public TestSrvClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected TestSrvClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected TestSrvClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Test.Services.PersonListResponse GetPersonList(global::Test.Services.GetPersonRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetPersonList(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Test.Services.PersonListResponse GetPersonList(global::Test.Services.GetPersonRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPersonList, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Test.Services.PersonListResponse> GetPersonListAsync(global::Test.Services.GetPersonRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetPersonListAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Test.Services.PersonListResponse> GetPersonListAsync(global::Test.Services.GetPersonRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPersonList, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override TestSrvClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new TestSrvClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static ServerServiceDefinition BindService(TestSrvBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetPersonList, serviceImpl.GetPersonList).Build();
    }

  }
}
#endregion
